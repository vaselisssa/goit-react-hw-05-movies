{"version":3,"file":"static/js/147.8bf5a796.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/layout/src/grid.tsx","../node_modules/@chakra-ui/layout/src/simple-grid.tsx","components/Cast/Cast.jsx","services/Api.js","../node_modules/@chakra-ui/breakpoint-utils/dist/chunk-G72KV6MB.mjs","../node_modules/@chakra-ui/card/src/card-body.tsx","../node_modules/@chakra-ui/card/src/card-context.tsx","../node_modules/@chakra-ui/card/src/card.tsx","../node_modules/@chakra-ui/image/src/native-image.tsx","../node_modules/@chakra-ui/image/src/use-image.ts","../node_modules/@chakra-ui/image/src/image.tsx","../node_modules/@chakra-ui/layout/src/text.tsx","../node_modules/@chakra-ui/layout/src/heading.tsx","../node_modules/@chakra-ui/object-utils/dist/chunk-R3DH46PF.mjs"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface GridOptions {\n  /**\n   * Shorthand prop for `gridTemplateColumns`\n   * @type SystemProps[\"gridTemplateColumns\"]\n   */\n  templateColumns?: SystemProps[\"gridTemplateColumns\"]\n  /**\n   * Shorthand prop for `gridGap`\n   * @type SystemProps[\"gridGap\"]\n   */\n  gap?: SystemProps[\"gridGap\"]\n  /**\n   * Shorthand prop for `gridRowGap`\n   * @type SystemProps[\"gridRowGap\"]\n   */\n  rowGap?: SystemProps[\"gridRowGap\"]\n  /**\n   * Shorthand prop for `gridColumnGap`\n   * @type SystemProps[\"gridColumnGap\"]\n   */\n  columnGap?: SystemProps[\"gridColumnGap\"]\n  /**\n   * Shorthand prop for `gridAutoFlow`\n   * @type SystemProps[\"gridAutoFlow\"]\n   */\n  autoFlow?: SystemProps[\"gridAutoFlow\"]\n  /**\n   * Shorthand prop for `gridAutoRows`\n   * @type SystemProps[\"gridAutoRows\"]\n   */\n  autoRows?: SystemProps[\"gridAutoRows\"]\n  /**\n   * Shorthand prop for `gridAutoColumns`\n   * @type SystemProps[\"gridAutoColumns\"]\n   */\n  autoColumns?: SystemProps[\"gridAutoColumns\"]\n  /**\n   * Shorthand prop for `gridTemplateRows`\n   * @type SystemProps[\"gridTemplateRows\"]\n   */\n  templateRows?: SystemProps[\"gridTemplateRows\"]\n  /**\n   * Shorthand prop for `gridTemplateAreas`\n   * @type SystemProps[\"gridTemplateAreas\"]\n   */\n  templateAreas?: SystemProps[\"gridTemplateAreas\"]\n  /**\n   * Shorthand prop for `gridColumn`\n   * @type SystemProps[\"gridColumn\"]\n   */\n  column?: SystemProps[\"gridColumn\"]\n  /**\n   * Shorthand prop for `gridRow`\n   * @type SystemProps[\"gridRow\"]\n   */\n  row?: SystemProps[\"gridRow\"]\n}\n\nexport interface GridProps\n  extends Omit<HTMLChakraProps<\"div\">, keyof GridOptions>,\n    GridOptions {}\n\n/**\n * React component used to create grid layouts.\n *\n * It renders a `div` with `display: grid` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/grid\n */\nexport const Grid = forwardRef<GridProps, \"div\">(function Grid(props, ref) {\n  const {\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props\n\n  const styles = {\n    display: \"grid\",\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nGrid.displayName = \"Grid\"\n","import {\n  forwardRef,\n  getToken,\n  ResponsiveValue,\n  useTheme,\n} from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\nimport { Grid, GridProps } from \"./grid\"\n\ninterface SimpleGridOptions {\n  /**\n   * The width at which child elements will break into columns. Pass a number for pixel values or a string for any other valid CSS length.\n   */\n  minChildWidth?: GridProps[\"minWidth\"]\n  /**\n   * The number of columns\n   */\n  columns?: ResponsiveValue<number>\n  /**\n   * The gap between the grid items\n   */\n  spacing?: GridProps[\"gridGap\"]\n  /**\n   * The column gap between the grid items\n   */\n  spacingX?: GridProps[\"gridGap\"]\n  /**\n   * The row gap between the grid items\n   */\n  spacingY?: GridProps[\"gridGap\"]\n}\n\nexport interface SimpleGridProps extends GridProps, SimpleGridOptions {}\n\n/**\n * SimpleGrid\n *\n * React component that uses the `Grid` component and provides\n * a simpler interface to create responsive grid layouts.\n *\n * Provides props that easily define columns and spacing.\n *\n * @see Docs https://chakra-ui.com/simplegrid\n */\nexport const SimpleGrid = forwardRef<SimpleGridProps, \"div\">(\n  function SimpleGrid(props, ref) {\n    const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } =\n      props\n\n    const theme = useTheme()\n    const templateColumns = minChildWidth\n      ? widthToColumns(minChildWidth, theme)\n      : countToColumns(columns)\n\n    return (\n      <Grid\n        ref={ref}\n        gap={spacing}\n        columnGap={spacingX}\n        rowGap={spacingY}\n        templateColumns={templateColumns}\n        {...rest}\n      />\n    )\n  },\n)\n\nSimpleGrid.displayName = \"SimpleGrid\"\n\nfunction toPx(n: string | number) {\n  return typeof n === \"number\" ? `${n}px` : n\n}\n\nfunction widthToColumns(width: any, theme: Record<string, any>) {\n  return mapResponsive(width, (value) => {\n    const _value = getToken(\"sizes\", value, toPx(value))(theme)\n    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`\n  })\n}\n\nfunction countToColumns(count: any) {\n  return mapResponsive(count, (value) =>\n    value === null ? null : `repeat(${value}, minmax(0, 1fr))`,\n  )\n}\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport {\n  Box,\n  Heading,\n  Card,\n  Image,\n  SimpleGrid,\n  CardBody,\n  Text,\n  useToast,\n} from '@chakra-ui/react';\n\nimport { fetchMovieCast } from 'services/Api';\nimport defaultPhoto from 'images/default_photo.jpg';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const toast = useToast();\n\n  useEffect(() => {\n    const movieCast = async () => {\n      try {\n        const response = await fetchMovieCast(movieId);\n        setCast(response);\n      } catch (error) {\n        toast({\n          title: 'Error fetching cast',\n          description: 'Try again later',\n          status: 'error',\n          duration: 9000,\n          isClosable: true,\n        });\n      }\n    };\n\n    movieCast();\n  }, [movieId, toast]);\n\n  if (!cast) {\n    return;\n  }\n\n  return (\n    <Box mt={10}>\n      <Heading as=\"h2\" size=\"lg\" color=\"green.400\" mb={4}>\n        Movie Cast\n      </Heading>\n      <SimpleGrid minChildWidth={180} spacing={8}>\n        {cast.map(({ id, profile_path, original_name, name, character }) => (\n          <Card key={id} boxShadow=\"dark-lg\" rounded=\"md\">\n            <Image\n              src={\n                profile_path === null\n                  ? defaultPhoto\n                  : `https://image.tmdb.org/t/p/w300${profile_path}`\n              }\n              alt={original_name}\n              objectFit=\"cover\"\n              h={300}\n              borderTopRadius=\"md\"\n            />\n            <CardBody p={4} textAlign=\"center\">\n              <Text py=\"1\" fontSize=\"xs\" fontWeight={700}>\n                {name}\n              </Text>\n              <Text py=\"1\" fontSize=\"xs\">\n                Character: {character}\n              </Text>\n            </CardBody>\n          </Card>\n        ))}\n      </SimpleGrid>\n    </Box>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst API_KEY = 'f4f004cf00175f9c9d985cec6ba8ee29';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const fetchTrendingMovies = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data.results;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(`/movie/${movieId}?api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const fetchMovieCast = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  return response.data.cast;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n\nexport const handleSearch = async searchQuery => {\n  const response = await axios.get(\n    `/search/movie?query=${searchQuery}&api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n","// src/responsive.ts\nimport { isObject } from \"@chakra-ui/shared-utils\";\nvar breakpoints = Object.freeze([\n  \"base\",\n  \"sm\",\n  \"md\",\n  \"lg\",\n  \"xl\",\n  \"2xl\"\n]);\nfunction mapResponsive(prop, mapper) {\n  if (Array.isArray(prop)) {\n    return prop.map((item) => item === null ? null : mapper(item));\n  }\n  if (isObject(prop)) {\n    return Object.keys(prop).reduce((result, key) => {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n  if (prop != null) {\n    return mapper(prop);\n  }\n  return null;\n}\nfunction objectToArrayNotation(obj, bps = breakpoints) {\n  const result = bps.map((br) => {\n    var _a;\n    return (_a = obj[br]) != null ? _a : null;\n  });\n  const lastItem = result[result.length - 1];\n  while (lastItem === null)\n    result.pop();\n  return result;\n}\nfunction arrayToObjectNotation(values, bps = breakpoints) {\n  const result = {};\n  values.forEach((value, index) => {\n    const key = bps[index];\n    if (value == null)\n      return;\n    result[key] = value;\n  });\n  return result;\n}\nfunction isResponsiveObjectLike(obj, bps = breakpoints) {\n  const keys = Object.keys(obj);\n  return keys.length > 0 && keys.every((key) => bps.includes(key));\n}\nvar isCustomBreakpoint = (v) => Number.isNaN(Number(v));\n\nexport {\n  breakpoints,\n  mapResponsive,\n  objectToArrayNotation,\n  arrayToObjectNotation,\n  isResponsiveObjectLike,\n  isCustomBreakpoint\n};\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport { forwardRef, HTMLChakraProps, chakra } from \"@chakra-ui/system\"\nimport { useCardStyles } from \"./card-context\"\n\nexport interface CardBodyProps extends HTMLChakraProps<\"div\"> {}\n\nexport const CardBody = forwardRef<CardBodyProps, \"div\">(function CardBody(\n  props,\n  ref,\n) {\n  const { className, ...rest } = props\n  const styles = useCardStyles()\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-card__body\", className)}\n      __css={styles.body}\n      {...rest}\n    />\n  )\n})\n","import { createStylesContext } from \"@chakra-ui/system\"\n\nexport const [CardStylesProvider, useCardStyles] = createStylesContext(\"Card\")\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  forwardRef,\n  HTMLChakraProps,\n  ThemingProps,\n  chakra,\n  omitThemingProps,\n  useMultiStyleConfig,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { CardStylesProvider } from \"./card-context\"\n\nexport type CardOptions = {\n  /**\n   * The flex direction of the card\n   */\n  direction?: SystemProps[\"flexDirection\"]\n  /**\n   * The flex alignment of the card\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * The flex distribution of the card\n   */\n  justify?: SystemProps[\"justifyContent\"]\n}\n\nexport interface CardProps\n  extends HTMLChakraProps<\"div\">,\n    CardOptions,\n    ThemingProps<\"Card\"> {}\n\nexport const Card = forwardRef<CardProps, \"div\">(function Card(props, ref) {\n  const {\n    className,\n    children,\n    direction = \"column\",\n    justify,\n    align,\n    ...rest\n  } = omitThemingProps(props)\n\n  const styles = useMultiStyleConfig(\"Card\", props)\n\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-card\", className)}\n      __css={{\n        display: \"flex\",\n        flexDirection: direction,\n        justifyContent: justify,\n        alignItems: align,\n        position: \"relative\",\n        minWidth: 0,\n        wordWrap: \"break-word\",\n        ...styles.container,\n      }}\n      {...rest}\n    >\n      <CardStylesProvider value={styles}>{children}</CardStylesProvider>\n    </chakra.div>\n  )\n})\n","import { PropsOf, forwardRef } from \"@chakra-ui/system\"\n\nexport interface NativeImageOptions {\n  /**\n   * The native HTML `width` attribute to the passed to the `img`\n   */\n  htmlWidth?: string | number\n  /**\n   * The native HTML `height` attribute to the passed to the `img`\n   */\n  htmlHeight?: string | number\n}\n\ninterface NativeImageProps extends PropsOf<\"img\">, NativeImageOptions {}\n\nexport const NativeImage = forwardRef(function NativeImage(\n  props: NativeImageProps,\n  ref: React.Ref<any>,\n) {\n  const { htmlWidth, htmlHeight, alt, ...rest } = props\n  return (\n    <img width={htmlWidth} height={htmlHeight} ref={ref} alt={alt} {...rest} />\n  )\n})\n\nNativeImage.displayName = \"NativeImage\"\n","import { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { useCallback, useEffect, useRef, useState } from \"react\"\n\ntype NativeImageProps = React.ImgHTMLAttributes<HTMLImageElement>\n\nexport interface UseImageProps {\n  /**\n   * The image `src` attribute\n   */\n  src?: string\n  /**\n   * The image `srcset` attribute\n   */\n  srcSet?: string\n  /**\n   * The image `sizes` attribute\n   */\n  sizes?: string\n  /**\n   * A callback for when the image `src` has been loaded\n   */\n  onLoad?: NativeImageProps[\"onLoad\"]\n  /**\n   * A callback for when there was an error loading the image `src`\n   */\n  onError?: NativeImageProps[\"onError\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   *\n   * @default false\n   */\n  ignoreFallback?: boolean\n  /**\n   * The key used to set the crossOrigin on the HTMLImageElement into which the image will be loaded.\n   * This tells the browser to request cross-origin access when trying to download the image data.\n   */\n  crossOrigin?: NativeImageProps[\"crossOrigin\"]\n  loading?: NativeImageProps[\"loading\"]\n}\n\ntype Status = \"loading\" | \"failed\" | \"pending\" | \"loaded\"\n\nexport type FallbackStrategy = \"onError\" | \"beforeLoadOrError\"\n\ntype ImageEvent = React.SyntheticEvent<HTMLImageElement, Event>\n\n/**\n * React hook that loads an image in the browser,\n * and lets us know the `status` so we can show image\n * fallback if it is still `pending`\n *\n * @returns the status of the image loading progress\n *\n * @example\n *\n * ```jsx\n * function App(){\n *   const status = useImage({ src: \"image.png\" })\n *   return status === \"loaded\" ? <img src=\"image.png\" /> : <Placeholder />\n * }\n * ```\n */\nexport function useImage(props: UseImageProps) {\n  const {\n    loading,\n    src,\n    srcSet,\n    onLoad,\n    onError,\n    crossOrigin,\n    sizes,\n    ignoreFallback,\n  } = props\n\n  const [status, setStatus] = useState<Status>(\"pending\")\n\n  useEffect(() => {\n    setStatus(src ? \"loading\" : \"pending\")\n  }, [src])\n\n  const imageRef = useRef<HTMLImageElement | null>()\n\n  const load = useCallback(() => {\n    if (!src) return\n\n    flush()\n\n    const img = new Image()\n    img.src = src\n    if (crossOrigin) img.crossOrigin = crossOrigin\n    if (srcSet) img.srcset = srcSet\n    if (sizes) img.sizes = sizes\n    if (loading) img.loading = loading\n\n    img.onload = (event) => {\n      flush()\n      setStatus(\"loaded\")\n      onLoad?.(event as unknown as ImageEvent)\n    }\n    img.onerror = (error) => {\n      flush()\n      setStatus(\"failed\")\n      onError?.(error as any)\n    }\n\n    imageRef.current = img\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading])\n\n  const flush = () => {\n    if (imageRef.current) {\n      imageRef.current.onload = null\n      imageRef.current.onerror = null\n      imageRef.current = null\n    }\n  }\n\n  useSafeLayoutEffect(() => {\n    /**\n     * If user opts out of the fallback/placeholder\n     * logic, let's bail out.\n     */\n    if (ignoreFallback) return undefined\n\n    if (status === \"loading\") {\n      load()\n    }\n    return () => {\n      flush()\n    }\n  }, [status, load, ignoreFallback])\n\n  /**\n   * If user opts out of the fallback/placeholder\n   * logic, let's just return 'loaded'\n   */\n  return ignoreFallback ? \"loaded\" : status\n}\n\nexport const shouldShowFallbackImage = (\n  status: Status,\n  fallbackStrategy: FallbackStrategy,\n) =>\n  (status !== \"loaded\" && fallbackStrategy === \"beforeLoadOrError\") ||\n  (status === \"failed\" && fallbackStrategy === \"onError\")\n\nexport type UseImageReturn = ReturnType<typeof useImage>\n","import {\n  chakra,\n  SystemProps,\n  forwardRef,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { omit } from \"@chakra-ui/object-utils\"\nimport {\n  FallbackStrategy,\n  shouldShowFallbackImage,\n  useImage,\n  UseImageProps,\n} from \"./use-image\"\nimport { NativeImage, NativeImageOptions } from \"./native-image\"\n\ninterface ImageOptions extends NativeImageOptions {\n  /**\n   * Fallback image `src` to show if image is loading or image fails.\n   *\n   * Note 🚨: We recommend you use a local image\n   */\n  fallbackSrc?: string\n  /**\n   * Fallback element to show if image is loading or image fails.\n   * @type React.ReactElement\n   */\n  fallback?: React.ReactElement\n  /**\n   * Defines loading strategy\n   */\n  loading?: \"eager\" | \"lazy\"\n  /**\n   * How the image to fit within its bounds.\n   * It maps to css `object-fit` property.\n   * @type SystemProps[\"objectFit\"]\n   */\n  fit?: SystemProps[\"objectFit\"]\n  /**\n   * How to align the image within its bounds.\n   * It maps to css `object-position` property.\n   * @type SystemProps[\"objectPosition\"]\n   */\n  align?: SystemProps[\"objectPosition\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   *\n   * @default false\n   */\n  ignoreFallback?: boolean\n\n  /**\n   * - beforeLoadOrError(default): loads the fallbackImage while loading the src\n   * - onError: loads the fallbackImage only if there is an error fetching the src\n   *\n   * @default \"beforeLoadOrError\"\n   * @see Issue https://github.com/chakra-ui/chakra-ui/issues/5581\n   */\n  fallbackStrategy?: FallbackStrategy\n  /**\n   * Defining which referrer is sent when fetching the resource.\n   * @type React.HTMLAttributeReferrerPolicy\n   */\n  referrerPolicy?: React.HTMLAttributeReferrerPolicy\n}\n\nexport interface ImageProps\n  extends UseImageProps,\n    Omit<HTMLChakraProps<\"img\">, keyof UseImageProps>,\n    ImageOptions {}\n\n/**\n * React component that renders an image with support\n * for fallbacks\n *\n * @see Docs https://chakra-ui.com/image\n */\nexport const Image = forwardRef<ImageProps, \"img\">(function Image(props, ref) {\n  const {\n    fallbackSrc,\n    fallback,\n    src,\n    srcSet,\n    align,\n    fit,\n    loading,\n    ignoreFallback,\n    crossOrigin,\n    fallbackStrategy = \"beforeLoadOrError\",\n    referrerPolicy,\n    ...rest\n  } = props\n\n  const providedFallback = fallbackSrc !== undefined || fallback !== undefined\n  /**\n   * Defer to native `img` tag if `loading` prop is passed\n   * @see https://github.com/chakra-ui/chakra-ui/issues/1027\n   *\n   * shouldIgnoreFallbackImage determines if we have the possibility to render a fallback image\n   */\n  const shouldIgnoreFallbackImage =\n    loading != null ||\n    // use can opt out of fallback image\n    ignoreFallback ||\n    // if the user doesn't provide any kind of fallback we should ignore it\n    !providedFallback\n\n  /**\n   * returns `loaded` if fallback is ignored\n   */\n  const status = useImage({\n    ...props,\n    crossOrigin,\n    ignoreFallback: shouldIgnoreFallbackImage,\n  })\n\n  const showFallbackImage = shouldShowFallbackImage(status, fallbackStrategy)\n\n  const shared = {\n    ref,\n    objectFit: fit,\n    objectPosition: align,\n    ...(shouldIgnoreFallbackImage ? rest : omit(rest, [\"onError\", \"onLoad\"])),\n  }\n\n  if (showFallbackImage) {\n    /**\n     * If user passed a custom fallback component,\n     * let's render it here.\n     */\n    if (fallback) return fallback\n\n    return (\n      <chakra.img\n        as={NativeImage}\n        className=\"chakra-image__placeholder\"\n        src={fallbackSrc}\n        {...shared}\n      />\n    )\n  }\n\n  return (\n    <chakra.img\n      as={NativeImage}\n      src={src}\n      srcSet={srcSet}\n      crossOrigin={crossOrigin}\n      loading={loading}\n      referrerPolicy={referrerPolicy}\n      className=\"chakra-image\"\n      {...shared}\n    />\n  )\n})\n\nImage.displayName = \"Image\"\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\n\nexport interface TextProps extends HTMLChakraProps<\"p\">, ThemingProps<\"Text\"> {\n  /**\n   * The CSS `text-align` property\n   * @type SystemProps[\"textAlign\"]\n   */\n  align?: SystemProps[\"textAlign\"]\n  /**\n   * The CSS `text-decoration` property\n   * @type SystemProps[\"textDecoration\"]\n   */\n  decoration?: SystemProps[\"textDecoration\"]\n  /**\n   * The CSS `text-transform` property\n   * @type SystemProps[\"textTransform\"]\n   */\n  casing?: SystemProps[\"textTransform\"]\n}\n\n/**\n * Used to render texts or paragraphs.\n *\n * @see Docs https://chakra-ui.com/text\n */\nexport const Text = forwardRef<TextProps, \"p\">(function Text(props, ref) {\n  const styles = useStyleConfig(\"Text\", props)\n  const { className, align, decoration, casing, ...rest } =\n    omitThemingProps(props)\n\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing,\n  })\n\n  return (\n    <chakra.p\n      ref={ref}\n      className={cx(\"chakra-text\", props.className)}\n      {...aliasedProps}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nText.displayName = \"Text\"\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface HeadingProps\n  extends HTMLChakraProps<\"h2\">,\n    ThemingProps<\"Heading\"> {}\n\n/**\n * `Heading` is used to render semantic HTML heading elements.\n *\n * By default, renders as `h2` with themantic size `xl`\n *\n * @see Docs https://chakra-ui.com/docs/components/heading\n */\nexport const Heading = forwardRef<HeadingProps, \"h2\">(function Heading(\n  props,\n  ref,\n) {\n  const styles = useStyleConfig(\"Heading\", props)\n  const { className, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.h2\n      ref={ref}\n      className={cx(\"chakra-heading\", props.className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nHeading.displayName = \"Heading\"\n","// src/compact.ts\nfunction compact(object) {\n  const clone = Object.assign({}, object);\n  for (let key in clone) {\n    if (clone[key] === void 0)\n      delete clone[key];\n  }\n  return clone;\n}\n\nexport {\n  compact\n};\n"],"names":["props","forwardRef","templateAreas","gap","rowGap","columnGap","column","row","autoFlow","autoRows","templateRows","autoColumns","templateColumns","rest","styles","display","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridColumn","gridRow","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns","div","__css","Grid","chakra","ref","getToken","spacingX","spacingY","spacing","minChildWidth","theme","widthToColumns","countToColumns","mapResponsive","_value","SimpleGrid","count","value","useTheme","displayName","toPx","n","movieId","useParams","useState","cast","setCast","toast","useToast","useEffect","movieCast","fetchMovieCast","response","title","description","status","duration","isClosable","mt","as","size","color","mb","map","id","profile_path","original_name","name","character","boxShadow","rounded","src","defaultPhoto","alt","objectFit","h","borderTopRadius","p","textAlign","py","fontSize","fontWeight","API_KEY","axios","fetchTrendingMovies","data","results","fetchMovieDetails","fetchMovieReviews","handleSearch","searchQuery","Object","freeze","prop","mapper","Array","isArray","item","isObject","keys","reduce","result","key","useCardStyles","cx","CardBody","createStylesContext","CardStylesProvider","children","direction","useMultiStyleConfig","justify","align","Card","omitThemingProps","justifyContent","alignItems","position","minWidth","wordWrap","container","htmlWidth","htmlHeight","width","height","NativeImage","fallback","keysToOmit","srcSet","fit","loading","ignoreFallback","crossOrigin","fallbackStrategy","referrerPolicy","providedFallback","shouldIgnoreFallbackImage","useImage","showFallbackImage","shared","onLoad","onError","sizes","setStatus","imageRef","useRef","load","useCallback","flush","img","Image","srcset","onload","event","onerror","error","current","useSafeLayoutEffect","omit","objectPosition","assign","clone","fallbackSrc","object","className","useStyleConfig","decoration","casing","aliasedProps","textDecoration","compact","textTransform","Text","h2","Heading"],"sourceRoot":""}