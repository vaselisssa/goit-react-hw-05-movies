{"version":3,"file":"static/js/122.abff6a51.chunk.js","mappings":"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","sources":["components/Reviews/Reviews.jsx","services/Api.js","../node_modules/@chakra-ui/card/src/card-body.tsx","../node_modules/@chakra-ui/card/src/card-context.tsx","../node_modules/@chakra-ui/card/src/card.tsx","../node_modules/@chakra-ui/layout/src/text.tsx","../node_modules/@chakra-ui/object-utils/dist/chunk-R3DH46PF.mjs","../node_modules/@chakra-ui/toast/src/use-toast.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Card, CardBody, Box, Text, Heading, useToast } from '@chakra-ui/react';\n\nimport { fetchMovieReviews } from 'services/Api';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState(null);\n  const toast = useToast();\n\n  useEffect(() => {\n    const movieReviews = async () => {\n      try {\n        const response = await fetchMovieReviews(movieId);\n        setReviews(response);\n      } catch (error) {\n        toast({\n          title: 'Error fetching reviews',\n          description: 'Try again later',\n          status: 'error',\n          duration: 9000,\n          isClosable: true,\n        });\n      }\n    };\n\n    movieReviews();\n  }, [movieId, toast]);\n\n  if (!reviews) {\n    return;\n  }\n\n  return (\n    <Box mt={10}>\n      <Heading as=\"h2\" size=\"lg\" color=\"green.400\" mb={4}>\n        Reviews\n      </Heading>\n      {reviews.map(({ id, author, content }) => (\n        <Card key={id}>\n          <CardBody>\n            <Text py=\"1\" fontSize=\"xs\" fontWeight={700}>\n              {author}\n            </Text>\n            <Text py=\"1\" fontSize=\"xs\">\n              {content}\n            </Text>\n          </CardBody>\n        </Card>\n      ))}\n    </Box>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst API_KEY = 'f4f004cf00175f9c9d985cec6ba8ee29';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const fetchTrendingMovies = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data.results;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(`/movie/${movieId}?api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const fetchMovieCast = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  return response.data.cast;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport { forwardRef, HTMLChakraProps, chakra } from \"@chakra-ui/system\"\nimport { useCardStyles } from \"./card-context\"\n\nexport interface CardBodyProps extends HTMLChakraProps<\"div\"> {}\n\nexport const CardBody = forwardRef<CardBodyProps, \"div\">(function CardBody(\n  props,\n  ref,\n) {\n  const { className, ...rest } = props\n  const styles = useCardStyles()\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-card__body\", className)}\n      __css={styles.body}\n      {...rest}\n    />\n  )\n})\n","import { createStylesContext } from \"@chakra-ui/system\"\n\nexport const [CardStylesProvider, useCardStyles] = createStylesContext(\"Card\")\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  forwardRef,\n  HTMLChakraProps,\n  ThemingProps,\n  chakra,\n  omitThemingProps,\n  useMultiStyleConfig,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { CardStylesProvider } from \"./card-context\"\n\nexport type CardOptions = {\n  /**\n   * The flex direction of the card\n   */\n  direction?: SystemProps[\"flexDirection\"]\n  /**\n   * The flex alignment of the card\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * The flex distribution of the card\n   */\n  justify?: SystemProps[\"justifyContent\"]\n}\n\nexport interface CardProps\n  extends HTMLChakraProps<\"div\">,\n    CardOptions,\n    ThemingProps<\"Card\"> {}\n\nexport const Card = forwardRef<CardProps, \"div\">(function Card(props, ref) {\n  const {\n    className,\n    children,\n    direction = \"column\",\n    justify,\n    align,\n    ...rest\n  } = omitThemingProps(props)\n\n  const styles = useMultiStyleConfig(\"Card\", props)\n\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-card\", className)}\n      __css={{\n        display: \"flex\",\n        flexDirection: direction,\n        justifyContent: justify,\n        alignItems: align,\n        position: \"relative\",\n        minWidth: 0,\n        wordWrap: \"break-word\",\n        ...styles.container,\n      }}\n      {...rest}\n    >\n      <CardStylesProvider value={styles}>{children}</CardStylesProvider>\n    </chakra.div>\n  )\n})\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\n\nexport interface TextProps extends HTMLChakraProps<\"p\">, ThemingProps<\"Text\"> {\n  /**\n   * The CSS `text-align` property\n   * @type SystemProps[\"textAlign\"]\n   */\n  align?: SystemProps[\"textAlign\"]\n  /**\n   * The CSS `text-decoration` property\n   * @type SystemProps[\"textDecoration\"]\n   */\n  decoration?: SystemProps[\"textDecoration\"]\n  /**\n   * The CSS `text-transform` property\n   * @type SystemProps[\"textTransform\"]\n   */\n  casing?: SystemProps[\"textTransform\"]\n}\n\n/**\n * Used to render texts or paragraphs.\n *\n * @see Docs https://chakra-ui.com/text\n */\nexport const Text = forwardRef<TextProps, \"p\">(function Text(props, ref) {\n  const styles = useStyleConfig(\"Text\", props)\n  const { className, align, decoration, casing, ...rest } =\n    omitThemingProps(props)\n\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing,\n  })\n\n  return (\n    <chakra.p\n      ref={ref}\n      className={cx(\"chakra-text\", props.className)}\n      {...aliasedProps}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nText.displayName = \"Text\"\n","// src/compact.ts\nfunction compact(object) {\n  const clone = Object.assign({}, object);\n  for (let key in clone) {\n    if (clone[key] === void 0)\n      delete clone[key];\n  }\n  return clone;\n}\n\nexport {\n  compact\n};\n","import type { AlertStatus } from \"@chakra-ui/alert\"\nimport { StyleProps, ThemingProps, useChakra } from \"@chakra-ui/system\"\nimport type { RenderProps, ToastId, ToastOptions } from \"./toast.types\"\nimport { createToastFn, CreateToastFnReturn } from \"./toast\"\nimport { ToastPosition } from \"./toast.placement\"\nimport { useMemo } from \"react\"\nimport { useToastOptionContext } from \"./toast.provider\"\n\nexport interface UseToastOptions extends ThemingProps<\"Alert\"> {\n  /**\n   * The placement of the toast\n   *\n   * @default \"bottom\"\n   */\n  position?: ToastPosition\n  /**\n   * The delay before the toast hides (in milliseconds)\n   * If set to `null`, toast will never dismiss.\n   *\n   * @default 5000 ( = 5000ms )\n   */\n  duration?: ToastOptions[\"duration\"]\n  /**\n   * Render a component toast component.\n   * Any component passed will receive 2 props: `id` and `onClose`.\n   */\n  render?(props: RenderProps): React.ReactNode\n  /**\n   * The title of the toast\n   */\n  title?: React.ReactNode\n  /**\n   * The description of the toast\n   */\n  description?: React.ReactNode\n  /**\n   * If `true`, toast will show a close button\n   * @default false\n   */\n  isClosable?: boolean\n  /**\n   * The status of the toast.\n   */\n  status?: AlertStatus\n  /**\n   * A custom icon that will be displayed by the toast.\n   */\n  icon?: React.ReactNode\n  /**\n   * The `id` of the toast.\n   *\n   * Mostly used when you need to prevent duplicate.\n   * By default, we generate a unique `id` for each toast\n   */\n  id?: ToastId\n  /**\n   * Callback function to run side effects after the toast has closed.\n   */\n  onCloseComplete?: () => void\n  /**\n   * Optional style overrides for the container wrapping the toast component.\n   */\n  containerStyle?: StyleProps\n}\n\n/**\n * React hook used to create a function that can be used\n * to show toasts in an application.\n */\nexport function useToast(options?: UseToastOptions): CreateToastFnReturn {\n  const { theme } = useChakra()\n  const defaultOptions = useToastOptionContext()\n\n  return useMemo(\n    () =>\n      createToastFn(theme.direction, {\n        ...defaultOptions,\n        ...options,\n      }),\n    [options, theme.direction, defaultOptions],\n  )\n}\n\nexport default useToast\n"],"names":["movieId","useParams","useState","reviews","setReviews","toast","useToast","useEffect","movieReviews","fetchMovieReviews","response","title","description","status","duration","isClosable","mt","as","size","color","mb","map","id","author","content","py","fontSize","fontWeight","API_KEY","axios","fetchTrendingMovies","data","results","fetchMovieDetails","fetchMovieCast","cast","ref","chakra","rest","styles","useCardStyles","div","__css","cx","props","CardBody","forwardRef","createStylesContext","CardStylesProvider","children","direction","useMultiStyleConfig","justify","align","display","Card","omitThemingProps","justifyContent","alignItems","position","minWidth","wordWrap","container","value","className","useStyleConfig","textAlign","decoration","casing","aliasedProps","textDecoration","object","clone","Object","assign","key","compact","textTransform","p","Text","theme","defaultOptions","useToastOptionContext","createToastFn","useChakra","options","useMemo"],"sourceRoot":""}